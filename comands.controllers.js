function textCommandsController(message) {
  const chatId = message.chat.id;
  const text = message.text;
  const firstName = message.from.first_name;

  switch (text) {
    case "/start":
      sendText(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –Ω–∞ GAS.`);
      break;

    case "/help":
      sendText(
        chatId,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
      );
      break;

    case "/menu":
      sendMenu(chatId);
      break;

    default:
      // –≠—Ö–æ-–æ—Ç–≤–µ—Ç
      sendText(chatId, `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"`);
  }
}

function queryCommandsController(query) {
  const chatId = query.message.chat.id;
  const data = query.data;
  const firstName = query.from.first_name;

  // –û—Ç–≤–µ—Ç –Ω–∞ callback - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
  answerCallbackQuery(query.id);

  switch (data) {
    case "start":
      sendText(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –Ω–∞ GAS.`);
      break;

    case "help":
      sendText(
        chatId,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
      );
      break;

    case "stats":
      sendText(chatId, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      break;

    case "settings":
      sendText(chatId, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
      break;

    default:
      sendText(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
  }
}

function answerCallbackQuery(callbackQueryId) {
  const url = `${CONFIG.API_URL}${CONFIG.TOKEN}/answerCallbackQuery`;
  
  const payload = {
    callback_query_id: callbackQueryId
  };

  const options = {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch(url, options);
    const result = JSON.parse(response.getContentText());
    
    if (!result.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery:', result.description);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ answerCallbackQuery:', error.message);
    return { ok: false, description: error.message };
  }
}
