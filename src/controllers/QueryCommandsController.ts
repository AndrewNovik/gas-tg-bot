import { CONFIG } from '../config';
import { CategoryType } from '../types';
import { StateManager } from '../services/StateManager';
import { MessageService } from '../services/MessageService';

export class QueryCommandsController {
  private static instance: QueryCommandsController;
  private stateManager: StateManager;
  private messageService: MessageService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
  }

  public static getInstance(): QueryCommandsController {
    if (!QueryCommandsController.instance) {
      QueryCommandsController.instance = new QueryCommandsController();
    }
    return QueryCommandsController.instance;
  }

  public handleQueryCommand(query: any): void {
    const chatId = query.message.chat.id;
    const data = query.data;
    const firstName = query.from.first_name;

    // –û—Ç–≤–µ—Ç –Ω–∞ callback - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    this.answerCallbackQuery(query.id);

    switch (data) {
      case 'start':
        this.messageService.sendText(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –Ω–∞ GAS.`);
        break;

      case 'help':
        this.messageService.sendText(
          chatId,
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n/add - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n/addcategory - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        );
        break;

      case 'stats':
        this.messageService.sendText(chatId, 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        break;

      case 'settings':
        this.messageService.sendText(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      case 'category_type_income':
        this.handleCategoryTypeSelection(chatId, CategoryType.INCOME);
        break;

      case 'category_type_expense':
        this.handleCategoryTypeSelection(chatId, CategoryType.EXPENSE);
        break;

      case 'category_type_transfer':
        this.handleCategoryTypeSelection(chatId, CategoryType.TRANSFER);
        break;

      case 'cancel_add_category':
        this.handleCancelAddCategory(chatId);
        break;

      default:
        this.messageService.sendText(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  }

  private handleCategoryTypeSelection(chatId: number, type: CategoryType): void {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–∏–ø–æ–º
      this.stateManager.updateUserStateData(chatId, { type: type });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —ç–º–æ–¥–∑–∏ (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ)
      this.stateManager.updateUserStateType(chatId, 'adding_category_emoji' as any);

      const typeNames = {
        [CategoryType.INCOME]: '–î–æ—Ö–æ–¥',
        [CategoryType.EXPENSE]: '–†–∞—Å—Ö–æ–¥',
        [CategoryType.TRANSFER]: '–ü–µ—Ä–µ–≤–æ–¥',
      };

      const message =
        `‚úÖ –¢–∏–ø: ${typeNames[type]}\n\n` +
        `üòä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üçï, üöó, üìö):`;

      this.messageService.sendText(chatId, message);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryTypeSelection –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCancelAddCategory(chatId: number): void {
    this.stateManager.clearUserState(chatId);
    this.messageService.sendText(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  }

  private answerCallbackQuery(callbackQueryId: string): any {
    const url = `${CONFIG.API_URL}${CONFIG.TOKEN}/answerCallbackQuery`;

    const payload = {
      callback_query_id: callbackQueryId,
    };

    const options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json',
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      const result = JSON.parse(response.getContentText());

      return result;
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ answerCallbackQuery: ${error instanceof Error ? error.message : String(error)}`,
      );

      return { ok: false, description: error instanceof Error ? error.message : String(error) };
    }
  }
}
