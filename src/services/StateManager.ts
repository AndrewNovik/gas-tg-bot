import { UserState, StateType } from '../types';
import { CONFIG } from '../config';

export class StateManager {
  private static instance: StateManager;
  private cache: GoogleAppsScript.Cache.Cache;

  private constructor() {
    this.cache = CacheService.getScriptCache();
  }

  public static getInstance(): StateManager {
    if (!StateManager.instance) {
      StateManager.instance = new StateManager();
    }
    return StateManager.instance;
  }

  public setUserState(chatId: number, stateType: StateType, data: Record<string, any> = {}): void {
    try {
      this.sendAdminMessage(`üîß –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${chatId}`);

      const state: UserState = {
        type: stateType,
        data: data,
        timestamp: new Date().getTime()
      };

      const key = `user_state_${chatId}`;
      const stateJson = JSON.stringify(state);

      this.sendAdminMessage(`üîß –ö–ª—é—á –∫—ç—à–∞: ${key}`);
      this.sendAdminMessage(`üîß –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${stateJson}`);
      this.sendAdminMessage(`üîß –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${stateJson.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –¥–æ—Å—Ç—É–ø–µ–Ω
      const testKey = `test_${Date.now()}`;
      this.cache.put(testKey, "test", 60);
      const testResult = this.cache.get(testKey);
      this.sendAdminMessage(`üîß –¢–µ—Å—Ç –∫—ç—à–∞: ${testResult === "test" ? "OK" : "FAILED"}`);
      this.cache.remove(testKey);

      this.cache.put(key, stateJson, 3600);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const savedData = this.cache.get(key);
      this.sendAdminMessage(`üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${savedData ? 'OK' : 'FAILED'}`);
      if (savedData) {
        this.sendAdminMessage(`üîß –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${savedData}`);
        this.sendAdminMessage(`üîß –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${savedData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      }

      this.sendAdminMessage(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${chatId}: ${stateJson}`);

    } catch (error) {
      this.sendAdminMessage(`‚ùå –û—à–∏–±–∫–∞ –≤ setUserState –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  public getUserState(chatId: number): UserState | null {
    try {
      this.sendAdminMessage(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${chatId}`);

      const key = `user_state_${chatId}`;

      this.sendAdminMessage(`üîç –ö–ª—é—á –∫—ç—à–∞: ${key}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç
      const testKey = `test_get_${Date.now()}`;
      this.cache.put(testKey, "test_get", 60);
      const testResult = this.cache.get(testKey);
      this.sendAdminMessage(`üîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: ${testResult === "test_get" ? "OK" : "FAILED"}`);
      this.cache.remove(testKey);

      const stateJson = this.cache.get(key);
      this.sendAdminMessage(`üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞: ${stateJson ? stateJson : 'null'}`);

      if (stateJson) {
        try {
          const state: UserState = JSON.parse(stateJson);
          this.sendAdminMessage(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${chatId}: ${JSON.stringify(state)}`);
          return state;
        } catch (error) {
          this.sendAdminMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`);
          return null;
        }
      }

      this.sendAdminMessage(`‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ`);
      return null;

    } catch (error) {
      this.sendAdminMessage(`‚ùå –û—à–∏–±–∫–∞ –≤ getUserState –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`);
      return null;
    }
  }

  public isUserInState(chatId: number, stateType: StateType): boolean {
    const state = this.getUserState(chatId);
    const result = Boolean(state && state.type === stateType);
    this.sendAdminMessage(`üîç isUserInState(${chatId}, ${stateType}): ${result}`);
    return result;
  }

  public clearUserState(chatId: number): void {
    const key = `user_state_${chatId}`;
    this.cache.remove(key);
    this.sendAdminMessage(`üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è ${chatId}`);
  }

  public updateUserStateData(chatId: number, newData: Record<string, any>): void {
    const state = this.getUserState(chatId);
    if (state) {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏
      state.data = { ...state.data, ...newData };
      state.timestamp = new Date().getTime();

      const key = `user_state_${chatId}`;
      this.cache.put(key, JSON.stringify(state), 3600);

      this.sendAdminMessage(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${chatId}: ${JSON.stringify(state)}`);
    } else {
      this.sendAdminMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${chatId}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
  }

  public updateUserStateType(chatId: number, newType: StateType): void {
    const state = this.getUserState(chatId);
    if (state) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      state.type = newType;
      state.timestamp = new Date().getTime();

      const key = `user_state_${chatId}`;
      this.cache.put(key, JSON.stringify(state), 3600);

      this.sendAdminMessage(`üîÑ –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${chatId}: ${newType}`);
      this.sendAdminMessage(`üîÑ –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);
    } else {
      this.sendAdminMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ${chatId}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
  }

  private sendAdminMessage(message: string): void {
    try {
      const url = `${CONFIG.API_URL}${CONFIG.TOKEN}/sendMessage`;
      const payload = {
        chat_id: CONFIG.ADMIN_ID,
        text: message,
        parse_mode: "HTML"
      };

      const options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {
        method: "post",
        headers: {
          "Content-Type": "application/json"
        },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      };

      UrlFetchApp.fetch(url, options);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
    }
  }
} 