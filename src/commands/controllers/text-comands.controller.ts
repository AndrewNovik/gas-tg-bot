import { CONFIG } from '@config';
import {
  Keyboard,
  StateManager,
  CategoryAddStepsCallBack,
  CategoryTypeCallBack,
  KeyboardCancelCallBack,
  UserState,
} from '@state';
import { MessageService } from '@messages';
import { GoogleSheetsService } from '@google-sheets';
import { Message } from '@telegram-api';
import { AbstractClassService } from '@shared';
import { CategoryType, USERS_ID } from '@commands';
export class TextCommandsController implements AbstractClassService<TextCommandsController> {
  private static instance: TextCommandsController;
  private readonly stateManager: StateManager;
  private readonly messageService: MessageService;
  private readonly googleSheetsService: GoogleSheetsService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
  }

  public static getInstance(): TextCommandsController {
    if (!TextCommandsController.instance) {
      TextCommandsController.instance = new TextCommandsController();
    }
    return TextCommandsController.instance;
  }

  public handleTextCommand(message: Message): void {
    const chatId = message.chat.id;
    const text = message.text;
    const firstName = message.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    if (!USERS_ID.includes(chatId)) {
      this.messageService.sendText(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
    if (!text) {
      return;
    }

    switch (text) {
      case '/start':
        this.messageService.sendText(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –Ω–∞ GAS.`);
        break;

      case '/help':
        this.messageService.sendText(
          chatId,
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n/add - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n/addcategory - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        );
        break;

      case '/menu':
        this.messageService.sendMenu(chatId);
        break;

      case '/addtransaction':
        this.handleAddTransaction(chatId, firstName);
        break;

      case '/addcategory':
        this.handleAddCategoryStart(chatId, firstName);
        break;

      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const currentState = this.stateManager.getUserState(chatId);
        this.messageService.sendText(chatId, JSON.stringify(currentState));
        if (currentState) {
          if (currentState.step === CategoryAddStepsCallBack.ADD_CATEGORY_NAME) {
            this.handleCategoryNameInput(chatId, text);
            return;
          }
          if (currentState.step === CategoryAddStepsCallBack.ADD_CATEGORY_EMOJI) {
            this.handleCategoryEmojiInput(chatId, text);
            return;
          }
        }

        if (this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_NAME)) {
          this.handleCategoryNameInput(chatId, text);
        } else if (
          this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_EMOJI)
        ) {
          this.handleCategoryEmojiInput(chatId, text);
        } else {
          // –≠—Ö–æ-–æ—Ç–≤–µ—Ç
          this.messageService.sendText(chatId, `–≠—Ö–æ: "${text}"`);
        }
    }
  }

  private handleAddTransaction(chatId: number, firstName: string): void {
    const description = 'Test transaction';
    const category = 'Test category';
    const amount = Math.floor(Math.random() * 5000) + 100; // –æ—Ç 100 –¥–æ 5100

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Google Sheets
      const result = this.googleSheetsService.addTransaction(description, amount, category);

      if (result.success && result.data) {
        const date = `${result.data?.[0] ?? ''}`;
        const time = `${result.data?.[1] ?? ''}`;
        const message =
          `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` +
          `üí∞ –°—É–º–º–∞: ${amount} —Ä—É–±.\n` +
          `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n` +
          `üìÖ –î–∞—Ç–∞: ${date}\n` +
          `üïê –í—Ä–µ–º—è: ${time}\n` +
          `üìä –°—Ç—Ä–æ–∫–∞: ${result.row || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;

        this.messageService.sendText(chatId, message);
      } else {
        this.messageService.sendText(
          chatId,
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        );
      }
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleAddTransaction: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleAddCategoryStart(chatId: number, firstName: string): void {
    if (this.stateManager.isUserInCache(chatId)) {
      this.stateManager.clearUserState(chatId);
    }

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.stateManager.setUserState(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_NAME);

      const message = `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`;

      this.messageService.sendText(chatId, message);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleAddCategoryStart –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCategoryNameInput(chatId: number, name: string): void {
    try {
      const state = this.stateManager.getUserState(chatId);
      if (!state) {
        this.messageService.sendText(
          chatId,
          '‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /addcategory',
        );
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      this.stateManager.updateUserStateData(chatId, { name: name });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ)
      this.stateManager.updateUserStep(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_TYPE);

      const message = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "${name}"`;

      const keyboard: Keyboard = {
        inline_keyboard: [
          [
            { text: 'üí∞ –î–æ—Ö–æ–¥', callback_data: CategoryTypeCallBack.INCOME },
            { text: 'üí∏ –†–∞—Å—Ö–æ–¥', callback_data: CategoryTypeCallBack.EXPENSE },
            { text: 'üîÑ –ü–µ—Ä–µ–≤–æ–¥', callback_data: CategoryTypeCallBack.TRANSFER },
          ],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: KeyboardCancelCallBack.CANCEL_STEPS }],
        ],
      };

      this.messageService.sendKeyboard(chatId, message, keyboard);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryNameInput –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCategoryEmojiInput(chatId: number, emoji: string): void {
    try {
      const state: UserState | null = this.stateManager.getUserState(chatId);
      if (!state) {
        this.messageService.sendText(
          chatId,
          '‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /addcategory',
        );
        return;
      }
      this.messageService.sendText(chatId, JSON.stringify(state));
      const { name, type } = state.data;

      const typeNames: Record<string, string> = {
        [CategoryTypeCallBack.INCOME]: CategoryType.INCOME,
        [CategoryTypeCallBack.EXPENSE]: CategoryType.EXPENSE,
        [CategoryTypeCallBack.TRANSFER]: CategoryType.TRANSFER,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ Google Sheets
      const result = this.googleSheetsService.addCategory(name, typeNames[type], emoji);

      if (result.success) {
        const message =
          `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n` +
          `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n` +
          `üìÇ –¢–∏–ø: ${typeNames[type]}\n` +
          `üòä –≠–º–æ–¥–∑–∏: ${emoji}\n`;

        this.messageService.sendText(chatId, message);
      } else {
        this.messageService.sendText(
          chatId,
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        );
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.stateManager.clearUserState(chatId);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryEmojiInput: ${error instanceof Error ? error.message : String(error)}`,
      );
      this.stateManager.clearUserState(chatId);
    }
  }
}
