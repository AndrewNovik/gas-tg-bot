import { CONFIG } from '@config';
import {
  StateManager,
  CategoryAddStepsCallBack,
  CategoryTypeCallBack,
  KeyboardCancelCallBack,
  UserState,
  Keyboard,
} from '@state';
import { MessageService } from '@messages';
import { GoogleSheetsService } from '@google-sheets';
import { Message, TelegramReplyKeyboard } from '@telegram-api';
import { AbstractClassService } from '@shared';
import { CategoryType, USERS_ID } from '@commands';
import { COMMANDS, COMMANDS_CB } from '@commands/enums/commands.enums';
import { TransactionCategory } from '@google-sheets/interfaces';

export class TextCommandsController implements AbstractClassService<TextCommandsController> {
  private static instance: TextCommandsController;
  private readonly stateManager: StateManager;
  private readonly messageService: MessageService;
  public readonly googleSheetsService: GoogleSheetsService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
  }

  public static getInstance(): TextCommandsController {
    if (!TextCommandsController.instance) {
      TextCommandsController.instance = new TextCommandsController();
    }
    return TextCommandsController.instance;
  }

  public handleTextCommand(message: Message): void {
    const chatId = message.chat.id;
    const text = message.text;
    const firstName = message.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    if (!USERS_ID.includes(chatId)) {
      this.messageService.sendText(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
    if (!text) {
      return;
    }

    switch (text) {
      case COMMANDS.START:
        const menuKeyboard: TelegramReplyKeyboard = {
          keyboard: [['üí∞ –î–æ—Ö–æ–¥', 'üí∏ –ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥'], ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']],
          resize_keyboard: true, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
          one_time_keyboard: false, // –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        };
        this.messageService.sendReplyMarkup(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –Ω–∞ GAS.`,
          menuKeyboard,
        );
        break;

      case COMMANDS.HELP:
        this.messageService.sendText(
          chatId,
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n/add - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n/addcategory - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        );
        break;

      case COMMANDS.MENU:
        this.messageService.sendMenu(chatId);
        break;

      case COMMANDS.ADDTRANSACTION:
        const transactionTypeKeyboard: Keyboard = {
          inline_keyboard: [
            [
              { text: 'üí∞ –î–æ—Ö–æ–¥', callback_data: COMMANDS_CB.INCOME },
              { text: 'üí∏ –†–∞—Å—Ö–æ–¥', callback_data: COMMANDS_CB.EXPENSE },
              { text: 'üîÑ –ü–µ—Ä–µ–≤–æ–¥', callback_data: COMMANDS_CB.TRANSFER },
            ],
          ],
        };
        this.messageService.sendKeyboard(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:',
          transactionTypeKeyboard,
        );
        break;

      case COMMANDS.ADDCATEGORY:
        this.handleAddCategoryStart(chatId, firstName);
        break;

      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const currentState = this.stateManager.getUserState(chatId);
        this.messageService.sendText(chatId, JSON.stringify(currentState));
        if (currentState) {
          if (currentState.step === CategoryAddStepsCallBack.ADD_CATEGORY_NAME) {
            this.handleCategoryNameInput(chatId, text);
            return;
          }
          if (currentState.step === CategoryAddStepsCallBack.ADD_CATEGORY_EMOJI) {
            this.handleCategoryEmojiInput(chatId, text);
            return;
          }
        }

        if (this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_NAME)) {
          this.handleCategoryNameInput(chatId, text);
        } else if (
          this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_EMOJI)
        ) {
          this.handleCategoryEmojiInput(chatId, text);
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç Reply Keyboard
          switch (text) {
            case 'üí∞ –î–æ—Ö–æ–¥':
              this.handleAddTransaction(chatId, firstName, CategoryType.INCOME);
              break;
            case 'üí∏ –ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥':
              this.handleAddTransaction(chatId, firstName, CategoryType.EXPENSE);
              break;
            case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
              this.messageService.sendText(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
              break;
            default:
              // –≠—Ö–æ-–æ—Ç–≤–µ—Ç
              this.messageService.sendText(chatId, `–≠—Ö–æ: "${text}"`);
          }
        }
    }
  }

  private handleAddCategoryStart(chatId: number, firstName: string): void {
    if (this.stateManager.isUserInCache(chatId)) {
      this.stateManager.clearUserState(chatId);
    }

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.stateManager.setUserState(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_NAME);

      const message = `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`;

      this.messageService.sendText(chatId, message);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleAddCategoryStart –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCategoryNameInput(chatId: number, name: string): void {
    try {
      const state = this.stateManager.getUserState(chatId);
      if (!state) {
        this.messageService.sendText(
          chatId,
          '‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /addcategory',
        );
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      this.stateManager.updateUserStateData(chatId, { name: name });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ)
      this.stateManager.updateUserStep(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_TYPE);

      const message = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "${name}"`;

      const keyboard: Keyboard = {
        inline_keyboard: [
          [
            { text: 'üí∞ –î–æ—Ö–æ–¥', callback_data: CategoryTypeCallBack.INCOME },
            { text: 'üí∏ –†–∞—Å—Ö–æ–¥', callback_data: CategoryTypeCallBack.EXPENSE },
            { text: 'üîÑ –ü–µ—Ä–µ–≤–æ–¥', callback_data: CategoryTypeCallBack.TRANSFER },
          ],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: KeyboardCancelCallBack.CANCEL_STEPS }],
        ],
      };

      this.messageService.sendKeyboard(chatId, message, keyboard);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryNameInput –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCategoryEmojiInput(chatId: number, emoji: string): void {
    try {
      const state: UserState | null = this.stateManager.getUserState(chatId);
      if (!state) {
        this.messageService.sendText(
          chatId,
          '‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /addcategory',
        );
        return;
      }
      this.messageService.sendText(chatId, JSON.stringify(state));
      const { name, type } = state.data;

      const typeNames: Record<string, string> = {
        [CategoryTypeCallBack.INCOME]: CategoryType.INCOME,
        [CategoryTypeCallBack.EXPENSE]: CategoryType.EXPENSE,
        [CategoryTypeCallBack.TRANSFER]: CategoryType.TRANSFER,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ Google Sheets
      const result = this.googleSheetsService.addCategory(name, typeNames[type], emoji);

      if (result.success) {
        const message =
          `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n` +
          `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}\n` +
          `üìÇ –¢–∏–ø: ${typeNames[type]}\n` +
          `üòä –≠–º–æ–¥–∑–∏: ${emoji}\n`;

        this.messageService.sendText(chatId, message);
      } else {
        this.messageService.sendText(
          chatId,
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        );
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.stateManager.clearUserState(chatId);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryEmojiInput: ${error instanceof Error ? error.message : String(error)}`,
      );
      this.stateManager.clearUserState(chatId);
    }
  }

  private handleAddTransaction(chatId: number, firstName: string, type: CategoryType): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
      const categories: TransactionCategory[] = this.googleSheetsService.getCategoriesByType(type);

      if (categories.length === 0) {
        this.messageService.sendText(
          chatId,
          `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–ø–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /addcategory`,
        );
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      const keyboard: TelegramReplyKeyboard = {
        keyboard: this.createCategoryKeyboard(categories),
        resize_keyboard: true,
        one_time_keyboard: false,
      };

      this.messageService.sendReplyMarkup(chatId, `–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, keyboard);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private createCategoryKeyboard(categories: TransactionCategory[]): string[][] {
    const keyboard: string[][] = [];
    const itemsPerRow = 2; // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É

    for (let i = 0; i < categories.length; i += itemsPerRow) {
      const row: string[] = [];

      for (let j = 0; j < itemsPerRow && i + j < categories.length; j++) {
        const category = categories[i + j];
        row.push(`${category.emoji} ${category.name}`);
      }

      keyboard.push(row);
    }

    return keyboard;
  }
}
