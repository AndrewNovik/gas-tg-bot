import { CONFIG } from '@config';
import { StateManager, STATE_STEPS } from '@state';
import { MessageService } from '@messages';
import { GoogleSheetsService } from '@google-sheets';
import { CallbackQuery, TelegramReplyKeyboardInterface } from '@telegram-api';
import { AbstractClassService } from '@shared';
import {
  USERS_ID,
  CALLBACK_COMMANDS,
  TRANSACTION_TYPE,
  CONFIRM_DESICION,
  CALLBACK_PREFIX,
  CONFIRM_ACTION,
} from '@commands';
import { TransactionCategory } from '@google-sheets/interfaces';

export class QueryCommandsController implements AbstractClassService<QueryCommandsController> {
  private static instance: QueryCommandsController;
  private stateManager: StateManager;
  private messageService: MessageService;
  public readonly googleSheetsService: GoogleSheetsService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
  }

  public static getInstance(): QueryCommandsController {
    if (!QueryCommandsController.instance) {
      QueryCommandsController.instance = new QueryCommandsController();
    }
    return QueryCommandsController.instance;
  }

  public handleQueryCommand(query: CallbackQuery): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!query.message) {
      return;
    }

    if (!USERS_ID.includes(query.message.chat.id)) {
      this.messageService.sendText(query.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
      return;
    }

    const chatId = query.message.chat.id;
    const data = query.data;
    const firstName = query.from.first_name;

    // –û—Ç–≤–µ—Ç –Ω–∞ callback - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    this.answerCallbackQuery(query.id);

    const state = this.stateManager.getUserState(chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ callback —Å –∫–ª—é—á–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (
      data &&
      data.startsWith(CALLBACK_COMMANDS.CHOOSE_TRANSACTION_CATEGORY) &&
      state?.step === STATE_STEPS.ADD_TRANSACTION_CATEGORY_TYPE
    ) {
      const categoryId = data.replace(CALLBACK_COMMANDS.CHOOSE_TRANSACTION_CATEGORY, '');
      this.handleChooseTransactionCategory(chatId, categoryId);
      return;
    }

    // if (data && data.startsWith(`${CONFIRM_DESICION}${CALLBACK_PREFIX}`) && state?.step === STATE_STEPS.ADD_TRANSACTION_AMOUNT) {
    //   const action: CONFIRM_ACTION = data.replace(`${CONFIRM_DESICION}${CALLBACK_PREFIX}`, '') as unknown as CONFIRM_ACTION;
    //   switch (action) {
    //     case CONFIRM_ACTION.CONFIRM:
    //       this.handleConfirmTransaction(chatId, state);
    //       return;
    //     case CONFIRM_ACTION.CANCEL:
    //       this.
    //       return;
    //     case CONFIRM_ACTION.EDIT:
    //       this.handleEditTransaction(chatId, state);
    //       return;
    //     default:
    //       this.messageService.sendText(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback');
    //       return;
    //   }
    // }

    switch (data) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

      default:
        this.messageService.sendText(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback');
    }
  }

  private handleCategoryTypeSelection(chatId: number, type: TRANSACTION_TYPE): void {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–∏–ø–æ–º
      this.stateManager.updateUserStateData(chatId, { type: type });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —ç–º–æ–¥–∑–∏ (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ)
      this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_EMOJI);

      const typeNames = {
        [TRANSACTION_TYPE.INCOME]: '–î–æ—Ö–æ–¥',
        [TRANSACTION_TYPE.EXPENSE]: '–†–∞—Å—Ö–æ–¥',
        [TRANSACTION_TYPE.TRANSFER]: '–ü–µ—Ä–µ–≤–æ–¥',
      };

      const message = `‚úÖ –¢–∏–ø: ${typeNames[type]}\n\n` + `üòä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`;

      this.messageService.sendText(chatId, message);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryTypeSelection –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCancelAddCategory(chatId: number): void {
    this.stateManager.clearUserState(chatId);
    this.messageService.sendText(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  }

  private answerCallbackQuery(callbackQueryId: string): any {
    const url = `${CONFIG.API_URL}${CONFIG.TOKEN}/answerCallbackQuery`;

    const payload = {
      callback_query_id: callbackQueryId,
    };

    const options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json',
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      const result = JSON.parse(response.getContentText());

      return result;
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ answerCallbackQuery: ${error instanceof Error ? error.message : String(error)}`,
      );

      return { ok: false, description: error instanceof Error ? error.message : String(error) };
    }
  }

  private handleChooseTransactionCategory(chatId: number, categoryId: string): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
      const category = this.googleSheetsService.getCategoryById(categoryId);

      if (!category) {
        this.messageService.sendText(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      this.stateManager.updateUserStateData(chatId, {
        transactionCategory: category,
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ —Å—É–º–º—ã)
      this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSACTION_AMOUNT);

      this.messageService.sendText(chatId, `–í–≤–µ–¥–∏ —Å—É–º–º—É:`);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleAddTransaction(chatId: number, type: TRANSACTION_TYPE): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
      const categories: TransactionCategory[] = this.googleSheetsService.getCategoriesByType(type);

      if (categories.length === 0) {
        this.messageService.sendText(
          chatId,
          `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–ø–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /addcategory`,
        );
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      const keyboard: TelegramReplyKeyboardInterface = {
        keyboard: this.createCategoryKeyboard(categories),
        resize_keyboard: true,
        one_time_keyboard: false,
      };

      this.messageService.sendReplyMarkup(chatId, `–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, keyboard);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private createCategoryKeyboard(categories: TransactionCategory[]): string[][] {
    const keyboard: string[][] = [];
    const itemsPerRow = 2; // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É

    for (let i = 0; i < categories.length; i += itemsPerRow) {
      const row: string[] = [];

      for (let j = 0; j < itemsPerRow && i + j < categories.length; j++) {
        const category = categories[i + j];
        row.push(`${category.emoji} ${category.name}`);
      }

      keyboard.push(row);
    }

    return keyboard;
  }
}
