import { CONFIG } from '@config';
import {
  StateManager,
  CategoryAddStepsCallBack,
  CategoryTypeCallBack,
  KeyboardCancelCallBack,
} from '@state';
import { MessageService } from '@messages';
import { GoogleSheetsService } from '@google-sheets';
import { CallbackQuery, TelegramReplyKeyboard } from '@telegram-api';
import { AbstractClassService } from '@shared';
import { USERS_ID } from '@commands/consts';
import { CategoryType, COMMANDS_CB } from '@commands/enums/commands.enums';
import { TransactionCategory } from '@google-sheets/interfaces';

export class QueryCommandsController implements AbstractClassService<QueryCommandsController> {
  private static instance: QueryCommandsController;
  private stateManager: StateManager;
  private messageService: MessageService;
  public readonly googleSheetsService: GoogleSheetsService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
  }

  public static getInstance(): QueryCommandsController {
    if (!QueryCommandsController.instance) {
      QueryCommandsController.instance = new QueryCommandsController();
    }
    return QueryCommandsController.instance;
  }

  public handleQueryCommand(query: CallbackQuery): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!query.message) {
      return;
    }

    if (!USERS_ID.includes(query.message.chat.id)) {
      this.messageService.sendText(query.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
      return;
    }

    const chatId = query.message.chat.id;
    const data = query.data;
    const firstName = query.from.first_name;

    // –û—Ç–≤–µ—Ç –Ω–∞ callback - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    this.answerCallbackQuery(query.id);

    this.messageService.sendText(chatId, JSON.stringify(query.data));
    const state = this.stateManager.getUserState(chatId);
    this.messageService.sendText(chatId, JSON.stringify(state));

    switch (data) {
      // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
      case COMMANDS_CB.HELP:
        this.messageService.sendText(
          chatId,
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n/add - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n/addcategory - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        );
        break;

      case COMMANDS_CB.STATS:
        this.messageService.sendText(chatId, 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        break;

      case COMMANDS_CB.SETTINGS:
        this.messageService.sendText(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      case CategoryTypeCallBack.INCOME:
        if (this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_TYPE)) {
          this.handleCategoryTypeSelection(chatId, CategoryTypeCallBack.INCOME);
        }
        break;

      case CategoryTypeCallBack.EXPENSE:
        if (this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_TYPE)) {
          this.handleCategoryTypeSelection(chatId, CategoryTypeCallBack.EXPENSE);
        }
        break;

      case CategoryTypeCallBack.TRANSFER:
        if (this.stateManager.isUserInSteps(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_TYPE)) {
          this.handleCategoryTypeSelection(chatId, CategoryTypeCallBack.TRANSFER);
        }
        break;

      case KeyboardCancelCallBack.CANCEL_STEPS:
        this.handleCancelAddCategory(chatId);
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      case COMMANDS_CB.INCOME:
        this.handleAddTransaction(chatId, firstName, CategoryType.INCOME);
        break;

      case COMMANDS_CB.EXPENSE:
        this.handleAddTransaction(chatId, firstName, CategoryType.EXPENSE);
        break;

      case COMMANDS_CB.TRANSFER:
        this.handleAddTransaction(chatId, firstName, CategoryType.TRANSFER);
        break;

      default:
        this.messageService.sendText(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  }

  private handleCategoryTypeSelection(chatId: number, type: CategoryTypeCallBack): void {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–∏–ø–æ–º
      this.stateManager.updateUserStateData(chatId, { type: type });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —ç–º–æ–¥–∑–∏ (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ)
      this.stateManager.updateUserStep(chatId, CategoryAddStepsCallBack.ADD_CATEGORY_EMOJI);

      const typeNames = {
        [CategoryTypeCallBack.INCOME]: '–î–æ—Ö–æ–¥',
        [CategoryTypeCallBack.EXPENSE]: '–†–∞—Å—Ö–æ–¥',
        [CategoryTypeCallBack.TRANSFER]: '–ü–µ—Ä–µ–≤–æ–¥',
      };

      const message = `‚úÖ –¢–∏–ø: ${typeNames[type]}\n\n` + `üòä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`;

      this.messageService.sendText(chatId, message);
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –û—à–∏–±–∫–∞ –≤ handleCategoryTypeSelection –¥–ª—è ${chatId}: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private handleCancelAddCategory(chatId: number): void {
    this.stateManager.clearUserState(chatId);
    this.messageService.sendText(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  }

  private answerCallbackQuery(callbackQueryId: string): any {
    const url = `${CONFIG.API_URL}${CONFIG.TOKEN}/answerCallbackQuery`;

    const payload = {
      callback_query_id: callbackQueryId,
    };

    const options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json',
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      const result = JSON.parse(response.getContentText());

      return result;
    } catch (error) {
      this.messageService.sendText(
        Number(CONFIG.ADMIN_ID),
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ answerCallbackQuery: ${error instanceof Error ? error.message : String(error)}`,
      );

      return { ok: false, description: error instanceof Error ? error.message : String(error) };
    }
  }

  private handleAddTransaction(chatId: number, firstName: string, type: CategoryType): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
      const categories: TransactionCategory[] = this.googleSheetsService.getCategoriesByType(type);

      if (categories.length === 0) {
        this.messageService.sendText(
          chatId,
          `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–ø–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /addcategory`,
        );
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      const keyboard: TelegramReplyKeyboard = {
        keyboard: this.createCategoryKeyboard(categories),
        resize_keyboard: true,
        one_time_keyboard: false,
      };

      this.messageService.sendReplyMarkup(chatId, `–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, keyboard);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private createCategoryKeyboard(categories: TransactionCategory[]): string[][] {
    const keyboard: string[][] = [];
    const itemsPerRow = 2; // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É

    for (let i = 0; i < categories.length; i += itemsPerRow) {
      const row: string[] = [];

      for (let j = 0; j < itemsPerRow && i + j < categories.length; j++) {
        const category = categories[i + j];
        row.push(`${category.emoji} ${category.name}`);
      }

      keyboard.push(row);
    }

    return keyboard;
  }
}
