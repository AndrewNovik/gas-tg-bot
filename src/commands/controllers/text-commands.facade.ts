import {
  addCategoryTypeInlienKeyboard,
  addTransactionReplyKeyboard,
  confirmInlineKeyboard,
  startMenuReplyKeyboard,
} from '@commands/consts';
import { TEXT_MESSAGES, TRANSACTION_TYPE } from '@commands';
import { CommandService } from '@commands/services';
import { TransactionCategory } from '@google-sheets/interfaces';
import { GoogleSheetsService } from '@google-sheets/services';
import { MessageService } from '@messages/services/message.service';
import { AbstractClassService } from '@shared/abstract-class.service';
import { STATE_STEPS, StateManager, UserStateInterface } from '@state';
import { TelegramInlineKeyboardInterface } from '@telegram-api';

export class TextCommandsFacade implements AbstractClassService<TextCommandsFacade> {
  private static instance: TextCommandsFacade;
  private readonly stateManager: StateManager;
  private readonly messageService: MessageService;
  public readonly googleSheetsService: GoogleSheetsService;
  public readonly commandService: CommandService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
    this.commandService = CommandService.getInstance();
  }

  public static getInstance(): TextCommandsFacade {
    if (!TextCommandsFacade.instance) {
      TextCommandsFacade.instance = new TextCommandsFacade();
    }
    return TextCommandsFacade.instance;
  }

  public mainCommandStart(chatId: number, firstName: string): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
    this.messageService.sendReplyMarkup(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      startMenuReplyKeyboard,
    );
  }

  public mainCommandCancel(chatId: number): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
    this.messageService.sendReplyMarkup(
      chatId,
      TEXT_MESSAGES.RESET_USER_STATE,
      startMenuReplyKeyboard,
    );
  }

  public mainCommandAddTransactionStart(chatId: number, firstName: string): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_TRANSACTION_TYPE);
    this.messageService.sendReplyMarkup(
      chatId,
      `‚òùÔ∏è ${firstName}! –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`,
      addTransactionReplyKeyboard,
    );
  }

  public mainCommandAddCategoryStart(chatId: number): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_CATEGORY_NAME);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`);
  }

  public mainCommandAddAccountStart(chatId: number): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_ACCOUNT_NAME);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞:`);
  }

  public noSuchCommandFound(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.messageService.sendText(chatId, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${trimmedText}"`);
    this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
    this.messageService.sendReplyMarkup(
      chatId,
      TEXT_MESSAGES.RESET_USER_STATE,
      startMenuReplyKeyboard,
    );
  }

  public mainCommandAddTransactionChooseCategory(chatId: number, type: TRANSACTION_TYPE): void {
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
    const categories: TransactionCategory[] = this.googleSheetsService.getCategoriesByType(type);

    if (categories.length === 0) {
      this.messageService.sendText(
        chatId,
        `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–ø–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /addcategory`,
      );
      this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const keyboard: TelegramInlineKeyboardInterface = {
      inline_keyboard: this.commandService.createCategoryInlineKeyboard(categories),
    };

    this.messageService.sendInlineKeyboard(chatId, `‚òùÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, keyboard);
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_TRANSACTION_CATEGORY_TYPE, {
      transactionType: type,
    });
  }

  public handleAddTransactionAmount(chatId: number, text: string): void {
    // –¢—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const trimmedText = text.trim();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const extractedAmount = this.extractNumberFromText(trimmedText);

    if (extractedAmount === null) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100" –∏–ª–∏ "50.50"',
      );
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const amountString = extractedAmount.toString();
    this.stateManager.updateUserStateData(chatId, { amount: amountString });

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { transactionType, amount, transactionCategory } = data as {
      transactionType: TRANSACTION_TYPE;
      amount: string;
      transactionCategory: TransactionCategory;
    };

    const transactionComment = data?.transactionComment || '';

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nTransaction type: ${transactionType} \nAmount: ${amount} \nCategory: ${transactionCategory.name} \n${transactionComment.length > 0 ? `Comment: ${transactionComment}` : ''}`,
      confirmInlineKeyboard,
    );
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSACTION_CONFIRM);
  }

  public handleAddTransactionComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { transactionComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSACTION_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;
    const { transactionType, amount, transactionCategory, transactionComment } = data as {
      transactionType: TRANSACTION_TYPE;
      amount: string;
      transactionCategory: TransactionCategory;
      transactionComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nTransaction type: ${transactionType} \nAmount: ${amount} \nCategory: ${transactionCategory.name} \n${transactionComment.length > 0 ? `Comment: ${transactionComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  private extractNumberFromText(text: string): number | null {
    try {
      // –¢–µ–∫—Å—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç—Ä–∏–º–ª–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –µ—â–µ —Ä–∞–∑
      const cleanText = text.trim();

      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
      const normalizedText = cleanText.replace(/,/g, '.');

      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª (—Ü–µ–ª—ã—Ö –∏ –¥—Ä–æ–±–Ω—ã—Ö)
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 123, 123.45, .45, 0.45
      const numberRegex = /(\d*\.?\d+)/g;

      const matches = normalizedText.match(numberRegex);

      if (!matches || matches.length === 0) {
        return null;
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
      const firstMatch = matches[0];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      const number = parseFloat(firstMatch);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
      if (isNaN(number) || !isFinite(number)) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
      if (number <= 0) {
        return null;
      }

      return number;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞:', error);
      return null;
    }
  }

  public handleAddCategoryName(chatId: number, text: string): void {
    // –¢—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const cleanName = text.trim();

    if (!cleanName) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    if (cleanName.length > 50) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.',
      );
      return;
    }

    this.stateManager.updateUserStateData(chatId, { categoryName: cleanName });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_TYPE);
    this.messageService.sendInlineKeyboard(
      chatId,
      `üìù –í–≤–µ–¥–∏ —Ç–∏–ø –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`,
      addCategoryTypeInlienKeyboard,
    );
  }

  public handleAddAccountName(chatId: number, text: string): void {
    const cleanName = text.trim();

    if (!cleanName) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    if (cleanName.length > 50) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.',
      );
      return;
    }
    this.stateManager.updateUserStateData(chatId, { accountName: cleanName });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_CURRENCY);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ –≤–∞–ª—é—Ç—É —Å—á–µ—Ç–∞:`);
  }

  public handleAddAccountCurrency(chatId: number, text: string): void {
    const cleanCurrency = text.trim();

    if (!cleanCurrency) {
      this.messageService.sendText(chatId, '‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      return;
    }

    if (cleanCurrency.length > 3) {
      this.messageService.sendText(chatId, '‚ùå –í–∞–ª—é—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }
    this.stateManager.updateUserStateData(chatId, { accountCurrency: cleanCurrency });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_AMOUNT);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞:`);
  }

  public handleAddAccountAmount(chatId: number, text: string): void {
    const cleanAmount = text.trim();
    const extractedAmount = this.extractNumberFromText(cleanAmount);

    if (extractedAmount === null) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100" –∏–ª–∏ "50.50"',
      );
      return;
    }

    const amountString = extractedAmount.toString();
    this.stateManager.updateUserStateData(chatId, { accountAmount: amountString });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_CONFIRM);

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { accountName, accountCurrency, accountAmount, accountComment } = data as {
      accountName: string;
      accountCurrency: string;
      accountAmount: string;
      accountComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${accountName} \nCurrency: ${accountCurrency} \nBalance: ${accountAmount} \n${accountComment.length > 0 ? `Comment: ${accountComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public handleAddAccountComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { accountComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;
    const { accountName, accountCurrency, accountAmount, accountComment } = data as {
      accountName: string;
      accountCurrency: string;
      accountAmount: string;
      accountComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${accountName} \nCurrency: ${accountCurrency} \nBalance: ${accountAmount} \n${accountComment.length > 0 ? `Comment: ${accountComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public handleAddCategoryEmoji(chatId: number, text: string): void {
    // –¢—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const cleanEmoji = text.trim();

    if (!cleanEmoji) {
      this.messageService.sendText(
        chatId,
        '‚ùå –≠–º–æ–¥–∑–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "üí∞" –∏–ª–∏ "üçï"',
      );
      return;
    }

    this.stateManager.updateUserStateData(chatId, { categoryEmoji: cleanEmoji });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_CONFIRM);

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { categoryName, categoryType, categoryEmoji } = data as {
      categoryName: string;
      categoryType: TRANSACTION_TYPE;
      categoryEmoji: string;
    };

    const categoryComment = data?.categoryComment || '';

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${categoryName} \nType: ${categoryType} \nEmoji: ${categoryEmoji} \n${categoryComment.length > 0 ? `Comment: ${categoryComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public handleAddCategoryComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { categoryComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;

    const { categoryName, categoryType, categoryEmoji, categoryComment } = data as {
      categoryName: string;
      categoryType: TRANSACTION_TYPE;
      categoryEmoji: string;
      categoryComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${categoryName} \nType: ${categoryType} \nEmoji: ${categoryEmoji} \n${categoryComment.length > 0 ? `Comment: ${categoryComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }
}
