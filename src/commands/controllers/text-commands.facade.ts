import {
  addCategoryTypeInlienKeyboard,
  addTransactionReplyKeyboard,
  confirmInlineKeyboard,
  startMenuReplyKeyboard,
} from '@commands/consts';
import { STATS_PER_PERIOD, TEXT_MESSAGES, TRANSACTION_TYPE } from '@commands';
import { CommandService } from '@commands/services';
import { TransactionAccount, TransactionCategory } from '@google-sheets/interfaces';
import { GoogleSheetsService } from '@google-sheets/services';
import { MessageService } from '@messages/services/message.service';
import { AbstractClassService } from '@shared/abstract-class.service';
import { STATE_STEPS, StateManager, UserStateInterface } from '@state';
import { TelegramInlineKeyboardInterface } from '@telegram-api';

export class TextCommandsFacade implements AbstractClassService<TextCommandsFacade> {
  private static instance: TextCommandsFacade;
  private readonly stateManager: StateManager;
  private readonly messageService: MessageService;
  public readonly googleSheetsService: GoogleSheetsService;
  public readonly commandService: CommandService;

  private constructor() {
    this.stateManager = StateManager.getInstance();
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
    this.commandService = CommandService.getInstance();
  }

  public static getInstance(): TextCommandsFacade {
    if (!TextCommandsFacade.instance) {
      TextCommandsFacade.instance = new TextCommandsFacade();
    }
    return TextCommandsFacade.instance;
  }

  public mainCommandStart(chatId: number, firstName: string): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
    this.messageService.sendReplyMarkup(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      startMenuReplyKeyboard,
    );
  }

  public mainCommandCancel(chatId: number): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
    this.messageService.sendReplyMarkup(
      chatId,
      TEXT_MESSAGES.RESET_USER_STATE,
      startMenuReplyKeyboard,
    );
  }

  public mainCommandAddTransactionStart(chatId: number, firstName: string): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_TRANSACTION_TYPE);
    this.messageService.sendReplyMarkup(
      chatId,
      `‚òùÔ∏è ${firstName}! –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`,
      addTransactionReplyKeyboard,
    );
  }

  public mainCommandAddCategoryStart(chatId: number): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_CATEGORY_NAME);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`);
  }

  public mainCommandAddAccountStart(chatId: number): void {
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_ACCOUNT_NAME);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞:`);
  }

  public noSuchCommandFound(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.messageService.sendText(chatId, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${trimmedText}"`);
    this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
    this.messageService.sendReplyMarkup(
      chatId,
      TEXT_MESSAGES.RESET_USER_STATE,
      startMenuReplyKeyboard,
    );
  }

  public mainCommandAddTransactionChooseAccount(chatId: number, type: TRANSACTION_TYPE): void {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
    const accounts = this.googleSheetsService.getAllAccounts();

    if (accounts.length === 0) {
      this.messageService.sendText(
        chatId,
        `‚ùå –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ /addaccount`,
      );
      this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—á–µ—Ç–∞–º–∏
    const keyboard: TelegramInlineKeyboardInterface = {
      inline_keyboard: this.commandService.createAccountInlineKeyboard(accounts),
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      TEXT_MESSAGES.CHOOSE_ACCOUNT_FOR_TRANSACTION,
      keyboard,
    );
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_TRANSACTION_ACCOUNT_TYPE, {
      transactionType: type,
    });
  }

  public handleAddTransactionAmount(chatId: number, text: string): void {
    // –¢—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const trimmedText = text.trim();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const extractedAmount = this.extractNumberFromText(trimmedText);

    if (extractedAmount === null) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100" –∏–ª–∏ "50.50"',
      );
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const amountString = extractedAmount.toString();
    this.stateManager.updateUserStateData(chatId, { amount: amountString });

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { transactionType, amount, transactionCategory, transactionAccount } = data as {
      transactionType: TRANSACTION_TYPE;
      amount: string;
      transactionCategory: TransactionCategory;
      transactionAccount: TransactionAccount;
    };

    const transactionComment = data?.transactionComment || '';

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nTransaction type: ${transactionType} \nAmount: ${amount} \nCategory: ${transactionCategory.name} \nAccount: ${transactionAccount?.name || 'Unknown'} \n${transactionComment.length > 0 ? `Comment: ${transactionComment}` : ''}`,
      confirmInlineKeyboard,
    );
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSACTION_CONFIRM);
  }

  public handleAddTransactionComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { transactionComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSACTION_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;
    const { transactionType, amount, transactionCategory, transactionComment, transactionAccount } =
      data as {
        transactionType: TRANSACTION_TYPE;
        amount: string;
        transactionCategory: TransactionCategory;
        transactionComment: string;
        transactionAccount: TransactionAccount;
      };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nTransaction type: ${transactionType} \nAmount: ${amount} \nCategory: ${transactionCategory.name} \nAccount: ${transactionAccount?.name || 'Unknown'} \n${transactionComment.length > 0 ? `Comment: ${transactionComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  private extractNumberFromText(text: string): number | null {
    try {
      // –¢–µ–∫—Å—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç—Ä–∏–º–ª–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –µ—â–µ —Ä–∞–∑
      const cleanText = text.trim();

      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
      const normalizedText = cleanText.replace(/,/g, '.');

      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª (—Ü–µ–ª—ã—Ö –∏ –¥—Ä–æ–±–Ω—ã—Ö)
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 123, 123.45, .45, 0.45
      const numberRegex = /(\d*\.?\d+)/g;

      const matches = normalizedText.match(numberRegex);

      if (!matches || matches.length === 0) {
        return null;
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
      const firstMatch = matches[0];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      const number = parseFloat(firstMatch);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
      if (isNaN(number) || !isFinite(number)) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
      if (number <= 0) {
        return null;
      }

      return number;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞:', error);
      return null;
    }
  }

  public handleAddCategoryName(chatId: number, text: string): void {
    // –¢—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const cleanName = text.trim();

    if (!cleanName) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    if (cleanName.length > 50) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.',
      );
      return;
    }

    this.stateManager.updateUserStateData(chatId, { categoryName: cleanName });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_TYPE);
    this.messageService.sendInlineKeyboard(
      chatId,
      `üìù –í–≤–µ–¥–∏ —Ç–∏–ø –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`,
      addCategoryTypeInlienKeyboard,
    );
  }

  public handleAddAccountName(chatId: number, text: string): void {
    const cleanName = text.trim();

    if (!cleanName) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    if (cleanName.length > 50) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.',
      );
      return;
    }
    this.stateManager.updateUserStateData(chatId, { accountName: cleanName });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_CURRENCY);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ –≤–∞–ª—é—Ç—É —Å—á–µ—Ç–∞:`);
  }

  public handleAddAccountCurrency(chatId: number, text: string): void {
    const cleanCurrency = text.trim();

    if (!cleanCurrency) {
      this.messageService.sendText(chatId, '‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      return;
    }

    if (cleanCurrency.length > 3) {
      this.messageService.sendText(chatId, '‚ùå –í–∞–ª—é—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }
    this.stateManager.updateUserStateData(chatId, { accountCurrency: cleanCurrency });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_AMOUNT);
    this.messageService.sendText(chatId, `üìù –í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞:`);
  }

  public handleAddAccountAmount(chatId: number, text: string): void {
    const cleanAmount = text.trim();
    const extractedAmount = this.extractNumberFromText(cleanAmount);

    if (extractedAmount === null) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100" –∏–ª–∏ "50.50"',
      );
      return;
    }

    const amountString = extractedAmount.toString();
    this.stateManager.updateUserStateData(chatId, { accountAmount: amountString });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_CONFIRM);

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { accountName, accountCurrency, accountAmount } = data as {
      accountName: string;
      accountCurrency: string;
      accountAmount: string;
    };

    const accountComment = data?.accountComment || '';

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${accountName} \nCurrency: ${accountCurrency} \nBalance: ${accountAmount} \n${accountComment.length > 0 ? `Comment: ${accountComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public handleAddAccountComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { accountComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_ACCOUNT_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;
    const { accountName, accountCurrency, accountAmount, accountComment } = data as {
      accountName: string;
      accountCurrency: string;
      accountAmount: string;
      accountComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${accountName} \nCurrency: ${accountCurrency} \nBalance: ${accountAmount} \n${accountComment.length > 0 ? `Comment: ${accountComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public handleAddCategoryEmoji(chatId: number, text: string): void {
    // –¢—Ä–∏–º–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const cleanEmoji = text.trim();

    if (!cleanEmoji) {
      this.messageService.sendText(
        chatId,
        '‚ùå –≠–º–æ–¥–∑–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "üí∞" –∏–ª–∏ "üçï"',
      );
      return;
    }

    this.stateManager.updateUserStateData(chatId, { categoryEmoji: cleanEmoji });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_CONFIRM);

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { categoryName, categoryType, categoryEmoji } = data as {
      categoryName: string;
      categoryType: TRANSACTION_TYPE;
      categoryEmoji: string;
    };

    const categoryComment = data?.categoryComment || '';

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${categoryName} \nType: ${categoryType} \nEmoji: ${categoryEmoji} \n${categoryComment.length > 0 ? `Comment: ${categoryComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public handleAddCategoryComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { categoryComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_CATEGORY_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;

    const { categoryName, categoryType, categoryEmoji, categoryComment } = data as {
      categoryName: string;
      categoryType: TRANSACTION_TYPE;
      categoryEmoji: string;
      categoryComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ Check data: \nName: ${categoryName} \nType: ${categoryType} \nEmoji: ${categoryEmoji} \n${categoryComment.length > 0 ? `Comment: ${categoryComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public mainCommandAddTransferStart(chatId: number): void {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
    const accounts = this.googleSheetsService.getAllAccounts();

    if (accounts.length === 0) {
      this.messageService.sendText(
        chatId,
        `‚ùå –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ /addaccount`,
      );
      this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
      return;
    }

    if (accounts.length < 2) {
      this.messageService.sendText(
        chatId,
        `‚ùå –î–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—á–µ—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ /addaccount`,
      );
      this.stateManager.setUserState(chatId, STATE_STEPS.DEFAULT);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—á–µ—Ç–∞–º–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    const keyboard: TelegramInlineKeyboardInterface = {
      inline_keyboard: this.commandService.createTransferFromAccountInlineKeyboard(accounts),
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      TEXT_MESSAGES.CHOOSE_FROM_ACCOUNT_FOR_TRANSFER,
      keyboard,
    );
    this.stateManager.setUserState(chatId, STATE_STEPS.ADD_TRANSFER_FROM_ACCOUNT);
  }

  public handleAddTransferAmount(chatId: number, text: string): void {
    const trimmedText = text.trim();
    const extractedAmount = this.extractNumberFromText(trimmedText);

    if (extractedAmount === null) {
      this.messageService.sendText(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100" –∏–ª–∏ "50.50"',
      );
      return;
    }

    const amountString = extractedAmount.toString();
    this.stateManager.updateUserStateData(chatId, { transferAmount: amountString });

    const currentUserState = this.stateManager.getUserState(chatId);
    const data = currentUserState?.data;

    const { transferFromAccount, transferToAccount, transferAmount } = data as {
      transferFromAccount: TransactionAccount;
      transferToAccount: TransactionAccount;
      transferAmount: string;
    };

    const transferComment = data?.transferComment || '';

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: \n–°–æ —Å—á–µ—Ç–∞: ${transferFromAccount.name} \n–ù–∞ —Å—á–µ—Ç: ${transferToAccount.name} \n–°—É–º–º–∞: ${transferAmount} \n${transferComment.length > 0 ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${transferComment}` : ''}`,
      confirmInlineKeyboard,
    );
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSFER_CONFIRM);
  }

  public handleAddTransferComment(chatId: number, text: string): void {
    const trimmedText = text.trim();
    this.stateManager.updateUserStateData(chatId, { transferComment: trimmedText ?? '' });
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSFER_CONFIRM);

    const data = this.stateManager.getUserState(chatId)?.data;
    const { transferFromAccount, transferToAccount, transferAmount, transferComment } = data as {
      transferFromAccount: TransactionAccount;
      transferToAccount: TransactionAccount;
      transferAmount: string;
      transferComment: string;
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      `‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: \n–°–æ —Å—á–µ—Ç–∞: ${transferFromAccount.name} \n–ù–∞ —Å—á–µ—Ç: ${transferToAccount.name} \n–°—É–º–º–∞: ${transferAmount} \n${transferComment.length > 0 ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${transferComment}` : ''}`,
      confirmInlineKeyboard,
    );
  }

  public mainCommandStatsPerPeriod(chatId: number, period: STATS_PER_PERIOD): void {
    try {
      if (period === STATS_PER_PERIOD.DAY) {
        this.showStatsPerPeriod(chatId, period);
      } else if (period === STATS_PER_PERIOD.WEEK) {
        this.showStatsPerPeriod(chatId, period);
      } else if (period === STATS_PER_PERIOD.TWO_WEEKS) {
        this.showStatsPerPeriod(chatId, period);
      } else if (period === STATS_PER_PERIOD.MONTH) {
        this.showStatsPerPeriod(chatId, period);
      } else {
        this.messageService.sendText(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private showStatsPerPeriod(chatId: number, period: STATS_PER_PERIOD): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const allTransactions = this.googleSheetsService.getAllTransactions();

      if (allTransactions.length === 0) {
        this.messageService.sendText(chatId, 'üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const { startDate, endDate, periodTitle } = this.getDateRangeForPeriod(period);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç (–∏–Ω–¥–µ–∫—Å 4 - –¥–∞—Ç–∞)
      const filteredTransactions = allTransactions.filter((transaction) => {
        const transactionDateString = transaction[4]; // –î–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 4
        const transactionDate = this.parseDate(transactionDateString);

        if (!transactionDate) return false;

        return transactionDate >= startDate && transactionDate <= endDate;
      });

      if (filteredTransactions.length === 0) {
        this.messageService.sendText(chatId, `üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ ${periodTitle} –Ω–µ—Ç`);
        return;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—É
      let totalDelta = 0;
      let incomeTotal = 0;
      let expenseTotal = 0;
      let transferCount = 0;

      const categoriesSummary: { [key: string]: { amount: number; type: string } } = {};

      filteredTransactions.forEach((transaction) => {
        const transactionType = transaction[1]; // –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å 1)
        const amount = parseFloat(transaction[2]); // –°—É–º–º–∞ (–∏–Ω–¥–µ–∫—Å 2)
        const category = transaction[3]; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∏–Ω–¥–µ–∫—Å 3)

        if (transactionType === TRANSACTION_TYPE.INCOME) {
          totalDelta += amount;
          incomeTotal += amount;
        } else if (transactionType === TRANSACTION_TYPE.EXPENSE) {
          totalDelta -= amount;
          expenseTotal += amount;
        } else if (transactionType === TRANSACTION_TYPE.TRANSFER) {
          transferCount++;
          // –î–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –Ω–µ –º–µ–Ω—è–µ–º –æ–±—â—É—é –¥–µ–ª—å—Ç—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
        if (categoriesSummary[category]) {
          categoriesSummary[category].amount += amount;
        } else {
          categoriesSummary[category] = {
            amount: amount,
            type: transactionType,
          };
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      let statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${periodTitle}*\n\n`;

      // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      statsMessage += `üí∞ *–û–±—â–∞—è –¥–µ–ª—å—Ç–∞:* ${totalDelta > 0 ? '+' : ''}${totalDelta.toFixed(2)} BYN\n`;
      statsMessage += `üíµ *–î–æ—Ö–æ–¥—ã:* +${incomeTotal.toFixed(2)} BYN\n`;
      statsMessage += `üí∏ *–†–∞—Å—Ö–æ–¥—ã:* -${expenseTotal.toFixed(2)} BYN\n`;

      if (transferCount > 0) {
        statsMessage += `üîÑ *–ü–µ—Ä–µ–≤–æ–¥—ã:* ${transferCount} —à—Ç.\n`;
      }

      statsMessage += `üìã *–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:* ${filteredTransactions.length} —à—Ç.\n\n`;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (Object.keys(categoriesSummary).length > 0) {
        statsMessage += `üìÇ *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n`;
        Object.entries(categoriesSummary)
          .sort(([, a], [, b]) => b.amount - a.amount) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
          .forEach(([category, data]) => {
            const sign =
              data.type === TRANSACTION_TYPE.INCOME
                ? '+'
                : data.type === TRANSACTION_TYPE.EXPENSE
                  ? '-'
                  : '';
            statsMessage += `  ‚Ä¢ ${category}: ${sign}${data.amount.toFixed(2)} BYN\n`;
          });
      }

      this.messageService.sendText(chatId, statsMessage);
    } catch (error) {
      this.messageService.sendText(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private getDateRangeForPeriod(period: STATS_PER_PERIOD): {
    startDate: Date;
    endDate: Date;
    periodTitle: string;
  } {
    const today = new Date();
    const endDate = new Date(today);
    endDate.setHours(23, 59, 59, 999); // –ö–æ–Ω–µ—Ü –¥–Ω—è

    let startDate: Date;
    let periodTitle: string;

    switch (period) {
      case STATS_PER_PERIOD.DAY:
        startDate = new Date(today);
        startDate.setHours(0, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è
        periodTitle = `—Å–µ–≥–æ–¥–Ω—è (${Utilities.formatDate(today, Session.getScriptTimeZone(), 'dd.MM.yyyy')})`;
        break;

      case STATS_PER_PERIOD.WEEK:
        startDate = new Date(today);
        startDate.setDate(today.getDate() - 6); // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        startDate.setHours(0, 0, 0, 0);
        periodTitle = `–Ω–µ–¥–µ–ª—é (${Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'dd.MM.yyyy')} - ${Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'dd.MM.yyyy')})`;
        break;

      case STATS_PER_PERIOD.TWO_WEEKS:
        startDate = new Date(today);
        startDate.setDate(today.getDate() - 13); // 14 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        startDate.setHours(0, 0, 0, 0);
        periodTitle = `2 –Ω–µ–¥–µ–ª–∏ (${Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'dd.MM.yyyy')} - ${Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'dd.MM.yyyy')})`;
        break;

      case STATS_PER_PERIOD.MONTH:
        startDate = new Date(today.getFullYear(), today.getMonth(), 1); // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        startDate.setHours(0, 0, 0, 0);
        periodTitle = `–º–µ—Å—è—Ü (${Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'dd.MM.yyyy')} - ${Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'dd.MM.yyyy')})`;
        break;

      default:
        startDate = new Date(today);
        startDate.setHours(0, 0, 0, 0);
        periodTitle = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
        break;
    }

    return { startDate, endDate, periodTitle };
  }

  private parseDate(dateString: string): Date | null {
    try {
      // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç dd.MM.yyyy
      const parts = dateString.split('.');
      if (parts.length !== 3) return null;

      const day = parseInt(parts[0], 10);
      const month = parseInt(parts[1], 10) - 1; // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      const year = parseInt(parts[2], 10);

      if (isNaN(day) || isNaN(month) || isNaN(year)) return null;

      const date = new Date(year, month, day);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (date.getDate() !== day || date.getMonth() !== month || date.getFullYear() !== year) {
        return null;
      }

      return date;
    } catch (error) {
      return null;
    }
  }
}
