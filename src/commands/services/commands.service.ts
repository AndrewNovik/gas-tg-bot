import { BotCommand, CALLBACK_COMMANDS, setupBotCommands, TEXT_MESSAGES } from '@commands';
import { MessageService } from '@messages';
import { AbstractClassService, getAdminId, getApiUrl, getToken } from '@shared';
import { TransactionCategory, TransactionAccount } from '@google-sheets/interfaces';
import { GoogleSheetsService } from '@google-sheets/services';
import { StateManager, STATE_STEPS } from '@state';
import { TelegramInlineKeyboardInterface } from '@telegram-api';

export class CommandService implements AbstractClassService<CommandService> {
  private static instance: CommandService;
  private messageService: MessageService;
  private googleSheetsService: GoogleSheetsService;
  private stateManager: StateManager;

  private constructor() {
    this.messageService = MessageService.getInstance();
    this.googleSheetsService = GoogleSheetsService.getInstance();
    this.stateManager = StateManager.getInstance();
  }

  public static getInstance(): CommandService {
    if (!CommandService.instance) {
      CommandService.instance = new CommandService();
    }
    return CommandService.instance;
  }

  public setupBotCommands(): void {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    const validationErrors = this.validateCommands(setupBotCommands);
    if (validationErrors.length > 0) {
      this.messageService.sendText(
        Number(getAdminId()),
        `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: ${validationErrors.join('\n')}`,
      );

      return;
    }

    const url = `${getApiUrl()}${getToken()}/setMyCommands`;

    const options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify({
        commands: setupBotCommands,
      }),
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      const result = JSON.parse(response.getContentText());

      if (result.ok) {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
      }
    } catch (error) {
      console.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:',
        error instanceof Error ? error.message : String(error),
      );
    }
  }

  public deleteBotCommands(): void {
    const url = `${getApiUrl()}${getToken()}/deleteMyCommands`;

    const options: GoogleAppsScript.URL_Fetch.URLFetchRequestOptions = {
      method: 'post',
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      const result = JSON.parse(response.getContentText());

      if (result.ok) {
        console.log('‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã');
      }
    } catch (error) {
      console.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:',
        error instanceof Error ? error.message : String(error),
      );
    }
  }

  private validateCommands(commands: BotCommand[]): string[] {
    const errors: string[] = [];

    commands.forEach((cmd, index) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
      if (!/^[a-z0-9_]+$/.test(cmd.command)) {
        errors.push(
          `–ö–æ–º–∞–Ω–¥–∞ "${cmd.command}" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
      if (cmd.description.length > 256) {
        errors.push(
          `–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã "${cmd.command}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç 256 —Å–∏–º–≤–æ–ª–æ–≤ (${cmd.description.length})`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã
      if (/^\d/.test(cmd.command)) {
        errors.push(`–ö–æ–º–∞–Ω–¥–∞ "${cmd.command}" –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
      if (cmd.command.length > 32) {
        errors.push(`–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã "${cmd.command}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞`);
      }
    });

    return errors;
  }

  public createCategoryInlineKeyboard(
    categories: TransactionCategory[],
  ): Array<Array<{ text: string; callback_data: string }>> {
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];
    const itemsPerRow = 3; // 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É

    for (let i = 0; i < categories.length; i += itemsPerRow) {
      const row: Array<{ text: string; callback_data: string }> = [];

      for (let j = 0; j < itemsPerRow && i + j < categories.length; j++) {
        const category = categories[i + j];
        row.push({
          text: `${category.emoji} ${category.name}`,
          callback_data: `${CALLBACK_COMMANDS.CHOOSE_TRANSACTION_CATEGORY}${category.id}`,
        });
      }

      keyboard.push(row);
    }

    return keyboard;
  }

  public createAccountInlineKeyboard(
    accounts: TransactionAccount[],
  ): Array<Array<{ text: string; callback_data: string }>> {
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];
    const itemsPerRow = 2; // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É –¥–ª—è —Å—á–µ—Ç–æ–≤

    for (let i = 0; i < accounts.length; i += itemsPerRow) {
      const row: Array<{ text: string; callback_data: string }> = [];

      for (let j = 0; j < itemsPerRow && i + j < accounts.length; j++) {
        const account = accounts[i + j];
        row.push({
          text: `üí≥ ${account.name} (${account.currency})`,
          callback_data: `${CALLBACK_COMMANDS.CHOOSE_TRANSACTION_ACCOUNT}${account.id}`,
        });
      }

      keyboard.push(row);
    }

    return keyboard;
  }

  public createTransferFromAccountInlineKeyboard(
    accounts: TransactionAccount[],
  ): Array<Array<{ text: string; callback_data: string }>> {
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];
    const itemsPerRow = 2; // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É –¥–ª—è —Å—á–µ—Ç–æ–≤

    for (let i = 0; i < accounts.length; i += itemsPerRow) {
      const row: Array<{ text: string; callback_data: string }> = [];

      for (let j = 0; j < itemsPerRow && i + j < accounts.length; j++) {
        const account = accounts[i + j];
        row.push({
          text: `üí≥ ${account.name} (${account.currency})`,
          callback_data: `${CALLBACK_COMMANDS.CHOOSE_TRANSFER_FROM_ACCOUNT}${account.id}`,
        });
      }

      keyboard.push(row);
    }

    return keyboard;
  }

  public createTransferToAccountInlineKeyboard(
    accounts: TransactionAccount[],
  ): Array<Array<{ text: string; callback_data: string }>> {
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];
    const itemsPerRow = 2; // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É –¥–ª—è —Å—á–µ—Ç–æ–≤

    for (let i = 0; i < accounts.length; i += itemsPerRow) {
      const row: Array<{ text: string; callback_data: string }> = [];

      for (let j = 0; j < itemsPerRow && i + j < accounts.length; j++) {
        const account = accounts[i + j];
        row.push({
          text: `üí≥ ${account.name} (${account.currency})`,
          callback_data: `${CALLBACK_COMMANDS.CHOOSE_TRANSFER_TO_ACCOUNT}${account.id}`,
        });
      }

      keyboard.push(row);
    }

    return keyboard;
  }

  public handleTransferToAccountChoice(chatId: number, fromAccountId: string): void {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
    const accounts = this.googleSheetsService.getAllAccounts();
    // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è
    const availableAccounts = accounts.filter((account) => account.id.toString() !== fromAccountId);

    if (availableAccounts.length === 0) {
      this.messageService.sendText(
        chatId,
        `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`,
      );
      this.stateManager.updateUserStateStep(chatId, STATE_STEPS.DEFAULT);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—á–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const keyboard: TelegramInlineKeyboardInterface = {
      inline_keyboard: this.createTransferToAccountInlineKeyboard(availableAccounts),
    };

    this.messageService.sendInlineKeyboard(
      chatId,
      TEXT_MESSAGES.CHOOSE_TO_ACCOUNT_FOR_TRANSFER,
      keyboard,
    );
    this.stateManager.updateUserStateStep(chatId, STATE_STEPS.ADD_TRANSFER_TO_ACCOUNT);
  }
}
